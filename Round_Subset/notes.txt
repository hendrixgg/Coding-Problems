- #of zeros at the ned of a number is the number of 10s in the product
= min(#of 5's in the product, #of 2's in the product)

max input = 1000000000000000000 = 10^18
log5(10^18) ~= 26, log2(10^18) ~= 60

dp[i][j][k] = maximum amount of twos
we can collect by checking first i numbers, taking j
of them with total power of five equal to k.

sample: 50, 4, 20
pw2  =   1, 2, 2
pw5 =   2, 0, 1

There are two types of transitions: take the next number or skip
dp[i][j][k]:

take i: dp[i+1][j+1][k+pw5[i]] = max(dp[i+1][j+1][k + pw5[i]], dp[i][j][k] + pw2[i])

skip i: dp[i+1][j][k] = max(dp[i+1][j][k], dp[i][j][k])


use sliding window technique to make dp:

dp[2][k][N*26] = #of 2's in product

dp[0] = dp[i-1], dp[1] = dp[i];
every time you increase i, move dp[1] -> dp[0] and delete dp[0]

loop i{
    loop j{
        loop k{
            dp[1][j][k] = max(dp[0][j-1][k+five[i]] + two[i], dp[0][j][k] );
        }
    }
    swap(dp[0], dp[1]);
}
